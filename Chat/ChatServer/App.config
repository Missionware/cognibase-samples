<?xml version="1.0" encoding="utf-8"?>
<configuration>

	<!-- Here we define the Cognibase configuration section  -->
	<configSections>
		<section name="ServerSetup" type="Cognibase"/>
	</configSections>

	<!-- Here we set various settings for the process (both Cognibase defined and custom application ones) -->
	<appSettings>
		<add key="Log To Output Level" value="Trace"/>
		<add key="Log To File Level" value="Trace"/>		

		<!-- Setting: SecurityImmutableAccountsMode { None, Registered, Configured, OSDefined, All } -->
		<add key="Security Immutable Accounts Mode" value="Configured"/>

	</appSettings>
	<ServerSetup>
			<!-- Defined the security accounts. Here we define that the security accounts are coming from the
	     Operating System. -->
			<IdentityStoreSetup Name="Basic" availableversion="1">
				
				<!-- Here we define the "Configured" Accounts. The data are stored in the DB only. -->
				<ConfiguredAccounts domainid="Basic" domainfullname="Basic">
					<User name="admin" password="admin" />
					<User name="user1" password="user1" />
					<User name="user2" password="user2" />
					<User name="user3" password="user3" />
					<User name="user4" password="user4" />
					<User name="user5" password="user5" />
				</ConfiguredAccounts>
			
			</IdentityStoreSetup>

			<!-- Here we set the settings for the store library and configuration.  -->
			<DataStoresSetup>
				<DataStore DomainAdapterType="OODB"
						   DataBaseAdapterEngineType="SQLITE"
						   ConnectionStr="database">

					<!-- This is the configuration for the data store of system Cognibase domain named Missionware.Cognibase.Domain.-->
					<Missionware.Cognibase.AppManagement.Domain/>

					<!-- This is the configuration for the data store of identiy domain named Missionware.Cognibase.Security.Identity.Domain  -->
					<Missionware.Cognibase.Security.Identity.Domain/>

					<ChatDomain Mandatory="True" />

				</DataStore>
			</DataStoresSetup>
			
			<!-- Here we set the settings for the communication method. Each library may have more than one protocols. 
			For example "Streaming" library contains the NamedPipes (pipe) and the Web Socket (ws) implementation -->
			<CommunicationSetup>
				<server>
					<!-- Here we define in which protocols does the Server Object Manager listens for new connections from clients -->
					<agent library="streaming" protocol="ws"/>
					<agent library="streaming" protocol="pipe"/>
				</server>
			</CommunicationSetup>
	</ServerSetup>
</configuration>
